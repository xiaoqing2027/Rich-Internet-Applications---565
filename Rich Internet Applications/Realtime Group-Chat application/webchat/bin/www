#!/usr/bin/env/node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sample:server');
var http = require('http');
var dbFile = require("../db");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var connections = {};

// io connection
io.on('connection', function (socket) {
  socket.on('chat_msg', function (msg) {
    io.emit('chat_msg', '[' + connections[socket.id] + ']: '+msg);
  });

  socket.on('chat_join', function (user) {
    connections[socket.id] = user;
    io.emit('chat_msg', "[SYSTEM] <i>user \'" + user + "\' joined the chatroom.</i>");
    console.log("user joined: " + user);
    var userInfo = {};

    userInfo["socket_id"] = socket.id;
    userInfo["user"] = user;
    userInfo["joined_at"] = (new Date()).toJSON();
    dbFile.insert(userInfo, function (err, savedUserInfo) {
        if(err){
          console.log(err);
        }
    });

  });

  socket.on('disconnect', function () {
    console.log(connections);
    console.log('Got disconnected! user: ' + connections[socket.id]);
    io.emit('chat_msg', "[SYSTEM]: <i>user \'" + connections[socket.id] + "\' disconneced.</i>");
    delete connections[socket.id];
    dbFile.remove({ socket_id: socket.id }, {}, function (err, numRemoved) {
        if(err){
          console.log(err);
        }
    });
  });

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
